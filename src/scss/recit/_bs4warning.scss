
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
) !default;
$spacer: 1rem !default;
$spacers: (
    0: 0,
    1: ($spacer * .25),
    2: ($spacer * .5),
    3: $spacer,
    4: ($spacer * 1.5),
    5: ($spacer * 2),
    6: ($spacer * 3)
) !default;


.bs4deprecated {
  background-color: #ff0000;
  padding: 5px;
  color: #fff;
  content: 'Legacy';
}

.editing {
.border-left::before {
  @extend .bs4deprecated;
  }
  .border-right::before {
  @extend .bs4deprecated;
  }
  
  .rounded-left::before {
  @extend .bs4deprecated;
  }
  .rounded-right::before {
  @extend .bs4deprecated;
  }
  .rounded-sm::before {
  @extend .bs4deprecated;
  }
  .rounded-lg::before {
  @extend .bs4deprecated;
  }
  
  // Generate all spacer classes for all breakpoints for directions start and end.
  // ps-1 > pl-1, pe-1 > pr-1, me-sm-1 > ml-sm-1, ...
  @each $breakpoint in map-keys($grid-breakpoints) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
      @each $prop, $abbrev in (margin: m, padding: p) {
          @each $size, $length in $spacers {
              .#{$abbrev}l#{$infix}-#{$size}::before {
                  @extend .bs4deprecated;
              }
              .#{$abbrev}r#{$infix}-#{$size}::before {
                  @extend .bs4deprecated;
              }
          }
      }
  }
  
  // Generate all margin auto classes for all breakpoints for directions start and end.
  // ps-auto > pl-auto, pe-auto > pr-auto, me-sm-auto > ml-sm-auto, ...
  @each $breakpoint in map-keys($grid-breakpoints) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
      .ml#{$infix}-auto::before {
          @extend .bs4deprecated;
      }
      .mr#{$infix}-auto::before {
          @extend .bs4deprecated;
      }
  }
  
  // Generate all float classes for all breakpoints for directions start and end.
  // float-start > float-left, float-sm-end > float-sm-right, ...
  @each $breakpoint in map-keys($grid-breakpoints) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
      .float#{$infix}-left::before {
          @extend .bs4deprecated;
      }
      .float#{$infix}-right::before {
          @extend .bs4deprecated;
      }
  }
  
  // Generate all text classes for all breakpoints for directions start and end.
  // text-start > text-left, text-sm-end > text-sm-right, ...
  @each $breakpoint in map-keys($grid-breakpoints) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
      .text#{$infix}-left::before {
          @extend .bs4deprecated;
      }
      .text#{$infix}-right::before {
          @extend .bs4deprecated;
      }
  }
  
  
  .form-group::before {
  @extend .bs4deprecated;
  }
  
  .no-gutters {
  @extend .bs4deprecated;
  }
  
  .btn-block::before {
      @extend .bs4deprecated;
  }
  
  .media::before {
    @extend .bs4deprecated;
  }
  
  .badge-danger::before {
    @extend .bs4deprecated;
  }
  
  .badge-warning::before {
    @extend .bs4deprecated;
  }
  
  .badge-success::before {
    @extend .bs4deprecated;
  }
  .badge-primary::before {
    @extend .bs4deprecated;
  }
  
  .badge-warning::before {
    @extend .bs4deprecated;
  }
}